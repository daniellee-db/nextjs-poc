{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport styled from 'styled-components';\nconst SpaceAroundContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\nconst DropdownContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n`;\nconst Dropdown = styled.div`\n  cursor: pointer;\n  position: absolute;\n  margin-top: 37px;\n  background: white;\n  width: 299px;\n  border-radius: 4px;\n  ${({\n  active\n}) => active && `\n    border: solid 1px;  \n  `}\n`;\nconst Selected = styled.div`\n  border: solid 1px;\n  border-radius: 4px;\n  height: 25px;\n  padding: 5px;\n`;\nexport async function getStaticProps() {\n  return {\n    props: {\n      departments: await retrieveDepartments(),\n      offices: await retrieveOffices(),\n      jobs: await retrieveJobs()\n    }\n  };\n}\nexport default class Careers extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"handleClickOutside\", () => {\n      this.setState({\n        departmentListOpen: false\n      });\n    });\n\n    _defineProperty(this, \"toggleDepartmentList\", () => {\n      this.setState({\n        departmentListOpen: !this.state.departmentListOpen\n      });\n    });\n\n    _defineProperty(this, \"toggleOfficeList\", () => {\n      this.setState({\n        officeListOpen: !this.state.officeListOpen\n      });\n    });\n\n    _defineProperty(this, \"handleSelectedDepartment\", selected => {\n      this.setState({\n        selectedDepartment: selected\n      });\n    });\n\n    _defineProperty(this, \"handleSelectedOffice\", selected => {\n      this.setState({\n        selectedOffice: selected\n      });\n    });\n\n    this.state = {\n      departmentListOpen: false,\n      officeListOpen: false,\n      selectedDepartment: 'Select Department',\n      selectedOffice: 'Select Office'\n    };\n  }\n\n  render() {\n    const parentJobs = this.props.jobs[0];\n    const childJobs = this.props.jobs[1];\n    const {\n      departments,\n      offices\n    } = this.props;\n    return __jsx(\"div\", null, console.log(offices), __jsx(SpaceAroundContainer, null, __jsx(DropdownContainer, {\n      onClick: () => this.toggleDepartmentList()\n    }, __jsx(Selected, null, this.state.selectedDepartment), __jsx(Dropdown, {\n      active: this.state.departmentListOpen\n    }, this.state.departmentListOpen && __jsx(\"ul\", {\n      style: {\n        listStyle: 'none'\n      }\n    }, __jsx(\"li\", {\n      key: \"all\",\n      onClick: () => this.handleSelectedDepartment('All Departments')\n    }, \"All Departments\"), Object.entries(departments).map((parent, index) => {\n      return __jsx(\"div\", null, __jsx(\"li\", {\n        key: index,\n        onClick: () => this.handleSelectedDepartment(parent[0])\n      }, parent[0]), parent[1].map((child, index) => {\n        return __jsx(\"li\", {\n          style: {\n            paddingLeft: '20px'\n          },\n          key: index,\n          onClick: () => this.handleSelectedDepartment(child)\n        }, child);\n      }));\n    })))), __jsx(DropdownContainer, {\n      onClick: () => this.toggleOfficeList()\n    }, __jsx(Selected, null, this.state.selectedOffice), __jsx(Dropdown, {\n      active: this.state.officeListOpen\n    }, this.state.officeListOpen && __jsx(\"ul\", {\n      style: {\n        listStyle: 'none'\n      }\n    }, __jsx(\"li\", {\n      key: \"all\",\n      onClick: () => this.handleSelectedOffice('All Offices')\n    }, \"All Offices\"), Object.entries(offices).map((parent, index) => {\n      return __jsx(\"div\", null, __jsx(\"li\", {\n        key: index,\n        onClick: () => this.handleSelectedOffice(parent[0])\n      }, parent[0]), parent[1].map((child, index) => {\n        return __jsx(\"li\", {\n          style: {\n            paddingLeft: '20px'\n          },\n          key: index,\n          onClick: () => this.handleSelectedOffice(child)\n        }, child);\n      }));\n    }))))), __jsx(\"div\", null, Object.entries(departments).map((parent, index) => {\n      return __jsx(\"div\", {\n        className: \"jobListContainer\"\n      }, __jsx(\"h3\", null, parent[0]), parentJobs[parent[0]] ? parentJobs[parent[0]].map(job => {\n        return __jsx(\"div\", {\n          className: \"jobRow\"\n        }, job[0], \" | \", job[1], \" | \", job[2]);\n      }) : null, parent[1].map(childName => {\n        return __jsx(\"div\", {\n          className: \"jobListContainer\"\n        }, __jsx(\"h3\", null, childName), childJobs[childName] ? childJobs[childName].map(job => {\n          return __jsx(\"div\", {\n            className: \"jobRow\"\n          }, job[0], \" | \", job[1], \" | \", job[2]);\n        }) : null);\n      }));\n    })));\n  }\n\n}\n\nconst retrieveJobs = async () => {\n  const res = await fetch('https://boards-api.greenhouse.io/v1/boards/databricks/departments');\n  const data = await res.json();\n  const parentJobsObject = {};\n  const childJobsObject = {};\n  data.departments.forEach(department => {\n    if (department.id !== 0 && department.parent_id === null) {\n      const jobs = [];\n      department.jobs.forEach(job => {\n        jobs.push([job.title, job.location.name, job.id]);\n        parentJobsObject[department.name] = jobs;\n      });\n    } else {\n      const jobs = [];\n      department.jobs.forEach(job => {\n        jobs.push([job.title, job.location.name, job.id]);\n        childJobsObject[department.name] = jobs;\n      });\n    }\n  });\n  return [parentJobsObject, childJobsObject];\n};\n\nconst retrieveDepartments = async () => {\n  const res = await fetch('https://boards-api.greenhouse.io/v1/boards/databricks/departments');\n  const data = await res.json();\n  const departmentIdPairs = {};\n  data.departments.forEach(department => {\n    departmentIdPairs[department.id] = department.name;\n  });\n  const parentDepartments = {};\n  data.departments.forEach(department => {\n    const subDepartments = [];\n\n    if (department.id !== 0 && department.parent_id === null && department.jobs.length > 0) {\n      if (department.child_ids.length > 0) {\n        department.child_ids.forEach(subDept => {\n          if (departmentIdPairs[subDept]) {\n            subDepartments.push(departmentIdPairs[subDept]);\n          }\n        });\n      }\n\n      parentDepartments[department.name] = subDepartments;\n    }\n  });\n  return parentDepartments;\n};\n\nconst retrieveOffices = async () => {\n  const res = await fetch('https://boards-api.greenhouse.io/v1/boards/databricks/offices');\n  const data = await res.json();\n  const officeIdPairs = {};\n  data.offices.forEach(office => {\n    officeIdPairs[office.id] = office.name;\n  });\n  const officeJobsObject = {};\n  data.offices.forEach(office => {\n    const jobs = [];\n    office.departments.forEach(department => {\n      department.jobs.forEach(job => {\n        jobs.push(job);\n        officeJobsObject[office.name] = jobs;\n      });\n    });\n  });\n  const regions = {};\n  data.offices.forEach(office => {\n    const cities = [];\n\n    if (office.id !== 0 && office.parent_id === null && office.child_ids.length > 0) {\n      office.child_ids.forEach(subOffice => {\n        if (officeIdPairs[subOffice] && officeJobsObject[officeIdPairs[subOffice]]) {\n          cities.push(officeIdPairs[subOffice]);\n        }\n      });\n      regions[office.name] = cities;\n    }\n  });\n  return regions;\n};","map":null,"metadata":{},"sourceType":"module"}